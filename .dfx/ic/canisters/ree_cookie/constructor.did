type CoinBalance = record { id : text; value : nat };
type ExchangeError = variant {
  InvalidSignPsbtArgs : text;
  InvalidNumeric;
  ParseUtxoRuneBalanceError : text;
  Overflow;
  InvalidInput;
  PoolAddressNotFound;
  NatConvertError : nat;
  CookieBalanceInsufficient : nat;
  GamerAlreadyExist : text;
  PoolStateExpired : nat64;
  GamerNotFound : text;
  GameNotEnd;
  TooSmallFunds;
  LastStateNotFound;
  InvalidRuneId;
  InvalidPool;
  InvalidPsbt : text;
  PoolAlreadyExists;
  GamerCoolingDown : record { text; nat64 };
  InvalidTxid : text;
  InvalidLiquidity;
  DepositRuneBalanceIncorrect : record { text; text };
  EmptyPool;
  RuneIndexerResultError : text;
  LpNotFound;
  ChainKeyError;
  FetchRuneIndexerError : record { RejectionCode; text };
  CustomError : text;
  InvalidState : text;
  InsufficientFunds;
  GamerWithdrawRepeatedly : text;
  RuneIdNotMatch : record { text; text };
};
type ExecuteTxArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  txid : text;
  intention_set : IntentionSet;
  intention_index : nat32;
  psbt_hex : text;
};
type FinalizeTxArgs = record { txid : text; pool_key : text };
type GameAndGamer = record {
  game_duration : nat64;
  claimed_cookies : nat;
  cookie_amount_per_claim : nat;
  max_cookies : nat;
  gamer : opt Gamer;
  game_start_time : nat64;
  claim_cooling_down : nat64;
  gamer_register_fee : nat64;
};
type Gamer = record {
  is_withdrawn : bool;
  last_click_time : nat64;
  address : text;
  cookies : nat;
};
type GetMinimalTxValueArgs = record {
  zero_confirmed_tx_queue_length : nat32;
  pool_address : text;
};
type GetPoolInfoArgs = record { pool_address : text };
type GetPoolListArgs = record { from : opt text; limit : nat32 };
type InputCoin = record { coin : CoinBalance; from : text };
type Intention = record {
  input_coins : vec InputCoin;
  output_coins : vec OutputCoin;
  action : text;
  exchange_id : text;
  pool_utxo_spend : vec text;
  action_params : text;
  nonce : nat64;
  pool_utxo_receive : vec text;
  pool_address : text;
};
type IntentionSet = record {
  initiator_address : text;
  intentions : vec Intention;
};
type OutputCoin = record { to : text; coin : CoinBalance };
type PoolInfo = record {
  key : text;
  name : text;
  btc_reserved : nat64;
  key_derivation_path : vec blob;
  coin_reserved : vec CoinBalance;
  attributes : text;
  address : text;
  nonce : nat64;
  utxos : vec Utxo;
};
type PoolState = record {
  id : opt text;
  utxo : Utxo;
  rune_utxo : Utxo;
  rune_balance : nat;
  user_action : UserAction;
  nonce : nat64;
};
type RegisterInfo = record {
  tweaked_key : text;
  utxo : Utxo;
  untweaked_key : text;
  address : text;
  nonce : nat64;
  register_fee : nat64;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : nat; Err : ExchangeError };
type Result_1 = variant { Ok; Err : ExchangeError };
type Result_2 = variant { Ok : text; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : text; Err : ExchangeError };
type UserAction = variant { Withdraw : text; Init; Register : text };
type Utxo = record {
  maybe_rune : opt CoinBalance;
  sats : nat64;
  txid : text;
  vout : nat32;
};
service : (
  nat64,
  nat32,
  text,
  nat64,
  nat64,
  nat64,
  nat,
  nat,
  principal,
  principal,
) -> {
  claim : () -> (Result);
  deposit : (Utxo, Utxo) -> (Result_1);
  execute_tx : (ExecuteTxArgs) -> (Result_2);
  finalize_tx : (FinalizeTxArgs) -> (Result_3);
  get_game_and_gamer_infos : (text) -> (GameAndGamer) query;
  get_minimal_tx_value : (GetMinimalTxValueArgs) -> (nat64) query;
  get_pool_info : (GetPoolInfoArgs) -> (opt PoolInfo) query;
  get_pool_list : (GetPoolListArgs) -> (vec PoolInfo) query;
  get_pool_states : () -> (vec PoolState) query;
  get_register_info : () -> (RegisterInfo) query;
  get_rune_deposit_address : () -> (opt text) query;
  init_key : () -> (Result_4);
  rollback_tx : (FinalizeTxArgs) -> (Result_3);
}